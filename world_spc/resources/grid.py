from flask_restful import Resource
from flask import current_app, request, abort
from marshmallow import Schema, fields
from world_spc.mocking import grid_parser
from datetime import datetime
from dateutil.rrule import rrule, HOURLY
import json
import os
from world_spc.extensions import mongo
from world_spc.scribes.carbon_scribe import get_grid_data
from world_spc.scribes.grid_scribe import update_grid_data


# Marshmallow for data validation and defining schema
class GridQuerySchema(Schema):
    region = fields.Str(required=True)
    start = fields.DateTime(required=True)
    end = fields.DateTime(required=True)


q_schema = GridQuerySchema()


class Grid(Resource):
    """
    Handles all logic for servicing grid data requests.
    """

    def get(self):
        """
        Return watts generated by fuel type over a given timeseries (WIP).
        """
        errors = q_schema.validate(request.args)
        if errors:
            abort(400, str(errors))
        region = request.args["region"]
        if region != 'mida':
            abort(400, 'No data currently for that region')
        else:
            start = datetime.strptime(
                request.args["start"],
                '%Y-%m-%dT%H:%M:%S'
            )
            end = datetime.strptime(
                request.args["end"],
                '%Y-%m-%dT%H:%M:%S'
            )
        response = get_grid_data(start, end, mongo.db)

        for obj in response:
            obj['timestamp'] = str(obj['timestamp'])

        return response

    def post(self):
        """
        Populate the db with hourly grid data. Will query EIA API for all
        available data from specified start date through latest available.
        """
        start = request.args['start']
        update_grid_data(mongo.db, start)
        return 'Write to database successful.'
