from flask_restful import Resource
from flask import current_app, request, abort
from marshmallow import Schema, fields
from world_spc.mocking import grid_parser
from datetime import datetime
from dateutil.rrule import rrule, HOURLY
import json
import os
from world_spc.extensions import mongo


# Marshmallow for data validation and defining schema
class GridQuerySchema(Schema):
    region = fields.Str(required=True)
    start = fields.DateTime(required=True)
    end = fields.DateTime(required=True)


q_schema = GridQuerySchema()


class Grid(Resource):
    """
    Handles all logic for servicing grid data requests.
    """

    def get(self):
        """
        Return watts generated by fuel type over a given timeseries (WIP).
        """
        errors = q_schema.validate(request.args)
        if errors:
            abort(400, str(errors))
        region = request.args["region"]
        if region != 'mida':
            abort(400, 'No data currently for that region')
        else:
            response = {'region': 'mida'}
            start = datetime.strptime(
                request.args["start"],
                '%Y-%m-%dT%H:%M:%S'
            )
            end = datetime.strptime(
                request.args["end"],
                '%Y-%m-%dT%H:%M:%S'
            )
            response.update({
                "start": start.strftime('%Y-%m-%dT%H:%M:%S'),
                "end": end.strftime('%Y-%m-%dT%H:%M:%S'),
                "data": []
            })
            with open(
                    os.path.join(
                        current_app.instance_path,
                        'mock_formatted_grid_data.json')
            ) as json_file:
                grid_data = json.load(json_file)

            hours = [timestamp for timestamp in rrule(
                HOURLY, dtstart=start, until=end
            )]
            for hour in hours:
                mw = {}
                for obj in grid_data['data']:
                    if obj['timestamp'] == hour.strftime('%Y-%m-%dT%H:%M:%S'):
                        mw = obj['megawatts']
                reading = {
                    'timestamp': hour.strftime('%Y-%m-%dT%H:%M:%S'),
                    'megawatts': mw
                }
                response['data'].append(reading)

        return response

    def post(self):
        grid_parser.generate(mongo.db)
        return 'Write to database successful.'
