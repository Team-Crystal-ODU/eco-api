from flask_restful import Resource, fields, reqparse, marshal_with
from flask import current_app, request, abort
import json
import os
from marshmallow import Schema, fields

# TODO investigate use of Pydantic or Marshmallow for data validation and maintaining schema
class GridQuerySchema(Schema):
    region = fields.Str(required=True)

schema = GridQuerySchema()

class Grid(Resource):
    """
    Handles all logic for servicing grid data requests and updating grid data model.
    """
    def get(self):
        """
        Return watts generated by fuel type over a given timeseries (WIP).
        """
        errors = schema.validate(request.args)
        if errors:
            abort(400, str(errors))
        
        region = request.args["region"]
        if region == "caiso":
            return self.__create_mock_payload()
        else:
            return {"error": "Could not find matching region."}
        
    # Testing purposes only
    def __create_mock_payload(self):
        """
        Helper function for testing purposes. Loads and returns sample JSON taken from EIA grid data.
        """
        with open(os.path.join(current_app.instance_path, 'mock_raw_grid_data.json')) as json_file:
            mock_payload = json.load(json_file)
        return mock_payload